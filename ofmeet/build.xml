<?xml version="1.0" encoding="UTF-8"?>

<!--
  - The build script for the OFMeet project.
  -
  - This script uses the Maven Ant Tasks project (http://maven.apache.org/ant-tasks/) to manage dependencies
  - (primarily the Jitsi-provided ones).
  -
  - Prerequisite: Have Apache Maven installed locally, have M2_HOME point to its directory.
  -
  - When executing a target of this Ant script, make sure that the Maven Ant Tasks library (which is in /buildtools/ )
  - is included in the execution. This script does not need it, but the videobridge script that's started by this script
  - does.
  -
  - For example, if normally would run this script in this way:
  -   ant clean jar
  -
  - You should now do:
  -   (Linux)   ant -lib ~/.m2/repository/org/apache/maven/maven-ant-tasks/2.1.3 clean jar
  -   (Windows) ant -lib %HOMEPATH%\.m2\repository\org\apache\maven\maven-ant-tasks\2.1.3 clean jar
  -->
<project name="ofmeet" default="jar" basedir=".." xmlns:if="ant:if">
	<description>Openfire Meetings Build</description>

	<!-- The tag (or branch, but it's safer to use a fixed reference) for the source of the Jitsi Jicofo project. -->
	<property name="jicofo-git-branch" value="306"/>
	<property name="videobridge-git-branch" value="842"/>

	<property environment="env"/>

	<property name="openfire.home" 	     value="./openfire_4_0_2/target/openfire" />
	<property name="lib.ant.dir" 	     value="./openfire_4_0_2/build/lib/ant" />
	<property name="ofmeet.dir" 	     value="ofmeet" />
	<property name="jicofo.workdir"      value="${ofmeet.dir}/clones/jicofo-${jicofo-git-branch}"/>
	<property name="videobridge.workdir" value="${ofmeet.dir}/clones/videobridge-${videobridge-git-branch}"/>

	<taskdef resource="org/eclipse/jgit/ant/ant-tasks.properties">
		<classpath>
			<pathelement location="buildtools/jgit-ant-tasks-4.5.0/org.eclipse.jgit.ant-4.5.0.201609210915-r.jar"/>
			<fileset dir="buildtools/jgit-ant-tasks-4.5.0/dependencies" includes="*.jar"/>
		</classpath>
	</taskdef>

	<taskdef resource="org/apache/maven/artifact/ant/antlib.xml">
		<classpath>
			<pathelement location="buildtools/maven-ant-tasks-2.1.3/maven-ant-tasks-2.1.3.jar"/>
		</classpath>
	</taskdef>

	<macrodef name="download-and-install">
		<attribute name="name" />
		<attribute name="repo.url" />
		<attribute name="repo.branch" />
		<attribute name="target.dir" />
		<element name="args" implicit="true" optional="true" />
		<sequential>
			<echo>Downloading and building @{name} branch/tag @{repo.branch} ...</echo>

			<condition property="doDownload">
				<not>
					<available file="@{target.dir}" type="dir"/>
				</not>
			</condition>
			<echo if:true="${doDownload}">Downloading @{name} into '@{target.dir}' ...</echo>
			<git-clone uri="@{repo.url}" dest="@{target.dir}" branch="@{repo.branch}" if:true="${doDownload}"/>

			<echo>Updating version number of local copy of @{name} ...</echo>
			<java classname="org.codehaus.classworlds.Launcher" fork="true" dir="@{target.dir}" failonerror="true">
				<jvmarg value="-Xmx512m"/>
				<classpath>
					<fileset dir="${env.M2_HOME}/boot">
						<include name="*.jar" />
					</fileset>
					<fileset dir="${env.M2_HOME}/lib">
						<include name="*.jar" />
					</fileset>
				</classpath>
				<sysproperty key="classworlds.conf" value="${env.M2_HOME}/bin/m2.conf" />
				<sysproperty key="maven.home" value="${env.M2_HOME}" />
				<sysproperty key="maven.multiModuleProjectDirectory" value="${env.M2_HOME}" />
				<arg line="--batch-mode -DdevelopmentVersion=@{repo.branch}-SNAPSHOT clean release:update-versions" />
			</java>

			<echo>Building @{name} in '@{target.dir}' and installing into local Maven repository ...</echo>
			<java classname="org.codehaus.classworlds.Launcher" fork="true" dir="@{target.dir}" failonerror="true">
				<jvmarg value="-Xmx512m"/>
				<classpath>
					<fileset dir="${env.M2_HOME}/boot">
						<include name="*.jar" />
					</fileset>
					<fileset dir="${env.M2_HOME}/lib">
						<include name="*.jar" />
					</fileset>
				</classpath>
				<sysproperty key="classworlds.conf" value="${env.M2_HOME}/bin/m2.conf" />
				<sysproperty key="maven.home" value="${env.M2_HOME}" />
				<sysproperty key="maven.multiModuleProjectDirectory" value="${env.M2_HOME}" />
				<arg line="--batch-mode -Dmaven.test.skip=true clean install" />
			</java>
		</sequential>
	</macrodef>

	<target name="download-and-build-dependencies">

		<download-and-install
				name="Jitsi Jicofo"
				repo.url="https://github.com/jitsi/jicofo.git"
				repo.branch="${jicofo-git-branch}"
				target.dir="${jicofo.workdir}" />

		<download-and-install
				name="Jitsi Videobridge"
				repo.url="https://github.com/jitsi/jitsi-videobridge.git"
				repo.branch="${videobridge-git-branch}"
				target.dir="${videobridge.workdir}" />

		<ant dir="${videobridge.workdir}" inheritall="true" target="dist.openfire"/>

		<javac source="1.7" target="1.7" debug="true" deprecation="false" srcdir="${videobridge.workdir}/openfire/src/java" destdir="${ofmeet.dir}/build/ofplugin-videobridge">
			<classpath>
				<fileset dir="${openfire.home}/lib" includes="*.jar"/>
				<fileset dir="${videobridge.workdir}/dist/openfire/jitsiVideobridge" includes="**/*.jar"/>
			</classpath>
		</javac>

		<delete file="${ofmeet.dir}/build/ofplugin-videobridge/plugin-videobridge.jar"/>
		<jar destfile="${ofmeet.dir}/build/ofplugin-videobridge/plugin-videobridge.jar">
			<fileset dir="${ofmeet.dir}/build/ofplugin-videobridge">
				<include name="**" />
			</fileset>
		</jar>
	</target>

	<target name="constructClasspath">
		<dependencies pathId="jitsi.classpath" filesetid="jitsi.fileset" versionsid="dependency.versions">
			<dependency groupId="org.jitsi" artifactId="jitsi-videobridge" version="${videobridge-git-branch}-SNAPSHOT"/>
			<dependency groupId="org.jitsi" artifactId="jicofo" version="${jicofo-git-branch}-SNAPSHOT"/>
		</dependencies>

		<path id="build.classpath">
			<fileset dir="${ofmeet.dir}/lib" includes="**/*.jar"/>
			<fileset dir="${openfire.home}/lib" includes="*.jar"/>
			<fileset dir="${ofmeet.dir}/build/ofplugin-videobridge" includes="**/*jar"/>
			<path refid="jitsi.classpath"/>
		</path>
	</target>

	<target name="init">
		<mkdir dir="${ofmeet.dir}/clones"/>
		<mkdir dir="${ofmeet.dir}/build/ofplugin-videobridge"/>
		<mkdir dir="${ofmeet.dir}/build/classes"/>
		<mkdir dir="${ofmeet.dir}/build/jar"/>
		<mkdir dir="${ofmeet.dir}/build/jspc/java"/>
		<mkdir dir="${ofmeet.dir}/build/jspc/classes"/>
	</target>
	
	<target name="clean">
        <delete dir="${ofmeet.dir}/build"/>
        <delete file="${openfire.home}/plugins/ofmeet.jar"/>
		<delete file="${openfire.home}/plugins/remotecontrol.zip"/>
	</target>
	
	<target name="compile" depends="init,download-and-build-dependencies,constructClasspath">

		<!-- Compiles the Java sources -->
		<javac source="1.7" target="1.7" debug="true" deprecation="false" srcdir="${ofmeet.dir}/src" destdir="${ofmeet.dir}/build/classes">
			<classpath refid="build.classpath"/>
		</javac>

		<!-- Build the plugin code library -->
		<jar destfile="${ofmeet.dir}/build/plugin-ofmeet.jar">
			<fileset dir="${ofmeet.dir}/build/classes">
				<include name="**" />
			</fileset>
		</jar>

		<!-- Compiles the admin panel (JSP) pages -->
		<java classname="org.apache.jasper.JspC" fork="true">
			<classpath>
				<pathelement location="${java.home}/../lib/tools.jar"/>
				<fileset dir="${ofmeet.dir}/lib" includes="**/*.jar"/>
				<fileset dir="${openfire.home}/lib" includes="*.jar"/>
				<fileset dir="${lib.ant.dir}" includes="*.jar" />
				<fileset dir="${ant.home}/lib" includes="ant.jar" />
			</classpath>
			<arg line="-uriroot '${ofmeet.dir}/src/web'"/>
			<arg line="-d '${ofmeet.dir}/build/jspc/java'"/>
			<arg line="-p org.jivesoftware.openfire.plugin.ofmeet"/>
			<arg line="-webxml '${ofmeet.dir}/build/jspc/web.xml'"/>
		</java>

		<javac source="1.7" target="1.7" debug="true" deprecation="true" srcdir="${ofmeet.dir}/build/jspc/java" destdir="${ofmeet.dir}/build/jspc/classes">
			<classpath>
				<path refid="build.classpath"/>
				<pathelement location="${ofmeet.dir}/build/plugin-ofmeet.jar"/>
			</classpath>
		</javac>

		<!-- Build the admin panel page (JSP) library -->
		<jar jarfile="${ofmeet.dir}/build/plugin-ofmeet-jspc.jar">
			<fileset dir="${ofmeet.dir}/build/jspc/classes"
					 includes="**/*.class"/>
		</jar>

		<copy todir="${ofmeet.dir}/src/web/WEB-INF"
			  file="${ofmeet.dir}/build/jspc/web.xml"
			  overwrite="${overwrite}"/>

	</target>

	<target name="jar" depends="compile,constructClasspath">

		<copy todir="${ofmeet.dir}/build/jar" overwrite="true">
			<fileset dir="${ofmeet.dir}/src">
				<exclude name="java/**/*.java"/>
				<exclude name="remotecontrol/**"/>
				<exclude name="java/**"/>
			</fileset>
		</copy>

		<copy todir="${ofmeet.dir}/build/jar/lib" overwrite="true" flatten="true">
			<fileset refid="jitsi.fileset"/>
			<fileset dir="${videobridge.workdir}/dist/openfire/jitsiVideobridge/lib" includes="jitsi-videobridge-native-*"/>
		</copy>

		<!-- This prevents an issue where the Openfire plugin tries to locate the native drivers based on the filename of the library being renamed here. -->
		<move file="${ofmeet.dir}/build/jar/lib/jitsi-videobridge-${videobridge-git-branch}-SNAPSHOT.jar" tofile="${ofmeet.dir}/build/jar/lib/jitsi-videobridge.jar"/>

		<copy todir="${ofmeet.dir}/build/jar/lib" overwrite="true" flatten="true">
			<fileset dir="${ofmeet.dir}/lib"/>
			<file file="${ofmeet.dir}/build/ofplugin-videobridge/plugin-videobridge.jar"/>
			<file file="${ofmeet.dir}/build/plugin-ofmeet.jar"/>
			<file file="${ofmeet.dir}/build/plugin-ofmeet-jspc.jar"/>
		</copy>
		<copy todir="${ofmeet.dir}/build/jar" overwrite="true">
			<fileset dir="${ofmeet.dir}">
				<exclude name="lib/**"/>
				<exclude name="build.*"/>
				<exclude name="build/**"/>
				<exclude name="src/**"/>
			</fileset>			
		</copy>		

		<jar destfile="${openfire.home}/plugins/remotecontrol.zip">
			<fileset dir="${ofmeet.dir}/src/remotecontrol">				
			</fileset>			
		</jar>
		
		<jar destfile="${openfire.home}/plugins/ofmeet.jar">
			<fileset dir="${ofmeet.dir}/build/jar">				
			</fileset>			
		</jar>
	</target>
</project>

