{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///external_api.min.js","webpack:///webpack/bootstrap 134667281e3349250335","webpack:///./modules/API/external/external_api.js","webpack:///./~/jitsi-meet-logger/lib/Logger.js","webpack:///./~/events/events.js","webpack:///./~/jitsi-meet-logger/lib/LogCollector.js","webpack:///./~/jitsi-meet-logger/lib/index.js","webpack:///./~/postis/src/index.js"],"names":["root","factory","exports","module","define","amd","JitsiMeetExternalAPI","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","__filename","_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","changeParticipantNumber","APIInstance","number","numberOfParticipants","configToURLParamsArray","config","arguments","length","undefined","params","key","push","encodeURIComponent","JSON","stringify","e","console","warn","generateURL","domain","options","configOverwrite","interfaceConfigOverwrite","jwt","noSSL","roomName","url","configURLParams","join","interfaceConfigURLParams","_createClass","defineProperties","target","props","i","descriptor","defineProperty","protoProps","staticProps","_events","_events2","_postis","_postis2","logger","getLogger","commands","avatarUrl","displayName","email","hangup","toggleAudio","toggleChat","toggleContactList","toggleFilmStrip","toggleShareScreen","toggleVideo","events","displayNameChange","incomingMessage","outgoingMessage","participantJoined","participantLeft","readyToClose","videoConferenceJoined","videoConferenceLeft","MIN_HEIGHT","MIN_WIDTH","_EventEmitter","width","height","parentNode","document","body","_this","getPrototypeOf","_createIFrame","Math","max","postis","scope","window","frame","contentWindow","_setupListeners","iframeHolder","appendChild","createElement","style","frameName","src","name","setAttribute","_this2","listen","bind","_loop","eventName","postisMethod","_len","args","Array","_key","emit","apply","concat","event","listener","on","listeners","addEventListener","destroy","removeAllListeners","removeChild","_len2","_key2","send","method","error","commandList","executeCommand","eventList","_this3","forEach","removeEventListener","getCallerInfo","callerInfo","methodName","fileLocation","line","column","Error","stack","split","match","indexOf","substr","log","level","slice","levels","transports","globalTransports","t","l","u","Logger","format","methods","keys","trace","debug","info","consoleTransport","addGlobalTransport","transport","removeGlobalTransport","transportIdx","splice","setLevel","TRACE","DEBUG","INFO","LOG","WARN","ERROR","EventEmitter","_maxListeners","isFunction","arg","isNumber","isObject","isUndefined","defaultMaxListeners","setMaxListeners","n","isNaN","type","er","handler","len","err","context","addListener","newListener","warned","once","g","removeListener","fired","list","position","ret","listenerCount","evlistener","emitter","LogCollector","logStorage","stringifyObjects","storeInterval","maxEntryLength","logLevel","_log","storeLogsIntervalID","queue","totalLen","outputCache","someObject","formatLogMessage","msg","prevMessage","prevMessageText","text","count","_flush","start","_reschedulePublishInterval","clearTimeout","setTimeout","flush","force","reschedule","isReady","cachedQueue","storeLogs","stop","idLoggers","loggers","curLevel","setLogLevelById","setLogLevel","Postis","readynessCheck","targetWindow","windowForEventListening","sendBuffer","listenBuffer","ready","readyMethod","data","parse","listenersForMethod","callback","listenBufferForMethod","j","opts","postMessage","clearInterval","readyCheckID","Date","random","setInterval"],"mappings":"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","file":"external_api.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetExternalAPI\"] = factory();\n\telse\n\t\troot[\"JitsiMeetExternalAPI\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetExternalAPI\"] = factory();\n\telse\n\t\troot[\"JitsiMeetExternalAPI\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/libs/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(__filename) {'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _events = __webpack_require__(2);\n\t\n\tvar _events2 = _interopRequireDefault(_events);\n\t\n\tvar _postis = __webpack_require__(5);\n\t\n\tvar _postis2 = _interopRequireDefault(_postis);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar logger = __webpack_require__(4).getLogger(__filename);\n\t\n\t/**\n\t * Maps the names of the commands expected by the API with the name of the\n\t * commands expected by jitsi-meet\n\t */\n\tvar commands = {\n\t    avatarUrl: 'avatar-url',\n\t    displayName: 'display-name',\n\t    email: 'email',\n\t    hangup: 'video-hangup',\n\t    toggleAudio: 'toggle-audio',\n\t    toggleChat: 'toggle-chat',\n\t    toggleContactList: 'toggle-contact-list',\n\t    toggleFilmStrip: 'toggle-film-strip',\n\t    toggleShareScreen: 'toggle-share-screen',\n\t    toggleVideo: 'toggle-video'\n\t};\n\t\n\t/**\n\t * Maps the names of the events expected by the API with the name of the\n\t * events expected by jitsi-meet\n\t */\n\tvar events = {\n\t    displayNameChange: 'display-name-change',\n\t    incomingMessage: 'incoming-message',\n\t    outgoingMessage: 'outgoing-message',\n\t    participantJoined: 'participant-joined',\n\t    participantLeft: 'participant-left',\n\t    readyToClose: 'video-ready-to-close',\n\t    videoConferenceJoined: 'video-conference-joined',\n\t    videoConferenceLeft: 'video-conference-left'\n\t};\n\t\n\t/**\n\t * Last id of api object\n\t * @type {number}\n\t */\n\tvar id = 0;\n\t\n\t/**\n\t * The minimum height for the Jitsi Meet frame\n\t * @type {number}\n\t */\n\tvar MIN_HEIGHT = 300;\n\t\n\t/**\n\t * The minimum width for the Jitsi Meet frame\n\t * @type {number}\n\t */\n\tvar MIN_WIDTH = 790;\n\t\n\t/**\n\t * Adds given number to the numberOfParticipants property of given APIInstance.\n\t *\n\t * @param {JitsiMeetExternalAPI} APIInstance - The instance of the API.\n\t * @param {int} number - The number of participants to be added to\n\t * numberOfParticipants property (this parameter can be negative number if the\n\t * numberOfParticipants should be decreased).\n\t * @returns {void}\n\t */\n\tfunction changeParticipantNumber(APIInstance, number) {\n\t    APIInstance.numberOfParticipants += number;\n\t}\n\t\n\t/**\n\t * Generates array with URL params based on the passed config object that will\n\t * be used for the Jitsi Meet URL generation.\n\t *\n\t * @param {Object} config - The config object.\n\t * @returns {Array<string>} The array with URL param strings.\n\t */\n\tfunction configToURLParamsArray() {\n\t    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\t\n\t    var params = [];\n\t\n\t    for (var key in config) {\n\t        // eslint-disable-line guard-for-in\n\t        try {\n\t            params.push(key + '=' + encodeURIComponent(JSON.stringify(config[key])));\n\t        } catch (e) {\n\t            console.warn('Error encoding ' + key + ': ' + e);\n\t        }\n\t    }\n\t\n\t    return params;\n\t}\n\t\n\t/**\n\t * Generates the URL for the iframe.\n\t *\n\t * @param {string} domain - The domain name of the server that hosts the\n\t * conference.\n\t * @param {string} [options] - Another optional parameters.\n\t * @param {Object} [options.configOverwrite] - Object containing configuration\n\t * options defined in config.js to be overridden.\n\t * @param {Object} [options.interfaceConfigOverwrite] - Object containing\n\t * configuration options defined in interface_config.js to be overridden.\n\t * @param {string} [options.jwt] - The JWT token if needed by jitsi-meet for\n\t * authentication.\n\t * @param {boolean} [options.noSsl] - If the value is true https won't be used.\n\t * @param {string} [options.roomName] - The name of the room to join.\n\t * @returns {string} The URL.\n\t */\n\tfunction generateURL(domain) {\n\t    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t    var configOverwrite = options.configOverwrite,\n\t        interfaceConfigOverwrite = options.interfaceConfigOverwrite,\n\t        jwt = options.jwt,\n\t        noSSL = options.noSSL,\n\t        roomName = options.roomName;\n\t\n\t\n\t    var url = (noSSL ? 'http' : 'https') + '://' + domain + '/' + (roomName || '');\n\t\n\t    if (jwt) {\n\t        url += '?jwt=' + jwt;\n\t    }\n\t\n\t    url += '#jitsi_meet_external_api_id=' + id;\n\t\n\t    var configURLParams = configToURLParamsArray(configOverwrite);\n\t\n\t    if (configURLParams.length) {\n\t        url += '&config.' + configURLParams.join('&config.');\n\t    }\n\t\n\t    var interfaceConfigURLParams = configToURLParamsArray(interfaceConfigOverwrite);\n\t\n\t    if (interfaceConfigURLParams.length) {\n\t        url += '&interfaceConfig.' + interfaceConfigURLParams.join('&interfaceConfig.');\n\t    }\n\t\n\t    return url;\n\t}\n\t\n\t/**\n\t * The IFrame API interface class.\n\t */\n\t\n\tvar JitsiMeetExternalAPI = function (_EventEmitter) {\n\t    _inherits(JitsiMeetExternalAPI, _EventEmitter);\n\t\n\t    /**\n\t     * Constructs new API instance. Creates iframe and loads Jitsi Meet in it.\n\t     *\n\t     * @param {string} domain - The domain name of the server that hosts the\n\t     * conference.\n\t     * @param {string} [roomName] - The name of the room to join.\n\t     * @param {number} [width] - Width of the iframe.\n\t     * @param {number} [height] - Height of the iframe.\n\t     * @param {DOMElement} [parentNode] - The node that will contain the\n\t     * iframe.\n\t     * @param {Object} [configOverwrite] - Object containing configuration\n\t     * options defined in config.js to be overridden.\n\t     * @param {Object} [interfaceConfigOverwrite] - Object containing\n\t     * configuration options defined in interface_config.js to be overridden.\n\t     * @param {boolean} [noSSL] - If the value is true https won't be used.\n\t     * @param {string} [jwt] - The JWT token if needed by jitsi-meet for\n\t     * authentication.\n\t     */\n\t    function JitsiMeetExternalAPI(domain) {\n\t        var roomName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\t        var width = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : MIN_WIDTH;\n\t        var height = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : MIN_HEIGHT;\n\t        var parentNode = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : document.body;\n\t        var configOverwrite = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n\t        var interfaceConfigOverwrite = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};\n\t        var noSSL = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;\n\t        var jwt = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : undefined;\n\t\n\t        _classCallCheck(this, JitsiMeetExternalAPI);\n\t\n\t        var _this = _possibleConstructorReturn(this, (JitsiMeetExternalAPI.__proto__ || Object.getPrototypeOf(JitsiMeetExternalAPI)).call(this));\n\t\n\t        _this.parentNode = parentNode;\n\t        _this.url = generateURL(domain, {\n\t            configOverwrite: configOverwrite,\n\t            interfaceConfigOverwrite: interfaceConfigOverwrite,\n\t            jwt: jwt,\n\t            noSSL: noSSL,\n\t            roomName: roomName\n\t        });\n\t        _this._createIFrame(Math.max(height, MIN_HEIGHT), Math.max(width, MIN_WIDTH));\n\t        _this.postis = (0, _postis2.default)({\n\t            scope: 'jitsi_meet_external_api_' + id,\n\t            window: _this.frame.contentWindow\n\t        });\n\t        _this.numberOfParticipants = 1;\n\t        _this._setupListeners();\n\t        id++;\n\t        return _this;\n\t    }\n\t\n\t    /**\n\t     * Creates the iframe element.\n\t     *\n\t     * @param {number} height - The height of the iframe.\n\t     * @param {number} width - The with of the iframe.\n\t     * @returns {void}\n\t     *\n\t     * @private\n\t     */\n\t\n\t\n\t    _createClass(JitsiMeetExternalAPI, [{\n\t        key: '_createIFrame',\n\t        value: function _createIFrame(height, width) {\n\t            this.iframeHolder = this.parentNode.appendChild(document.createElement('div'));\n\t            this.iframeHolder.id = 'jitsiConference' + id;\n\t            this.iframeHolder.style.width = width + 'px';\n\t            this.iframeHolder.style.height = height + 'px';\n\t\n\t            this.frameName = 'jitsiConferenceFrame' + id;\n\t\n\t            this.frame = document.createElement('iframe');\n\t            this.frame.src = this.url;\n\t            this.frame.name = this.frameName;\n\t            this.frame.id = this.frameName;\n\t            this.frame.width = '100%';\n\t            this.frame.height = '100%';\n\t            this.frame.setAttribute('allowFullScreen', 'true');\n\t            this.frame = this.iframeHolder.appendChild(this.frame);\n\t        }\n\t\n\t        /**\n\t         * Setups listeners that are used internally for JitsiMeetExternalAPI.\n\t         *\n\t         * @returns {void}\n\t         *\n\t         * @private\n\t         */\n\t\n\t    }, {\n\t        key: '_setupListeners',\n\t        value: function _setupListeners() {\n\t            var _this2 = this;\n\t\n\t            this.postis.listen('participant-joined', changeParticipantNumber.bind(null, this, 1));\n\t            this.postis.listen('participant-left', changeParticipantNumber.bind(null, this, -1));\n\t\n\t            var _loop = function _loop(eventName) {\n\t                // eslint-disable-line guard-for-in\n\t                var postisMethod = events[eventName];\n\t\n\t                _this2.postis.listen(postisMethod, function () {\n\t                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t                        args[_key] = arguments[_key];\n\t                    }\n\t\n\t                    return _this2.emit.apply(_this2, [eventName].concat(args));\n\t                });\n\t            };\n\t\n\t            for (var eventName in events) {\n\t                _loop(eventName);\n\t            }\n\t        }\n\t\n\t        /**\n\t         * Adds event listener to Meet Jitsi.\n\t         *\n\t         * @param {string} event - The name of the event.\n\t         * @param {Function} listener - The listener.\n\t         * @returns {void}\n\t         *\n\t         * @deprecated\n\t         * NOTE: This method is not removed for backward comatability purposes.\n\t         */\n\t\n\t    }, {\n\t        key: 'addEventListener',\n\t        value: function addEventListener(event, listener) {\n\t            this.on(event, listener);\n\t        }\n\t\n\t        /**\n\t         * Adds event listeners to Meet Jitsi.\n\t         *\n\t         * @param {Object} listeners - The object key should be the name of\n\t         * the event and value - the listener.\n\t         * Currently we support the following\n\t         * events:\n\t         * incomingMessage - receives event notifications about incoming\n\t         * messages. The listener will receive object with the following structure:\n\t         * {{\n\t         *  'from': from,//JID of the user that sent the message\n\t         *  'nick': nick,//the nickname of the user that sent the message\n\t         *  'message': txt//the text of the message\n\t         * }}\n\t         * outgoingMessage - receives event notifications about outgoing\n\t         * messages. The listener will receive object with the following structure:\n\t         * {{\n\t         *  'message': txt//the text of the message\n\t         * }}\n\t         * displayNameChanged - receives event notifications about display name\n\t         * change. The listener will receive object with the following structure:\n\t         * {{\n\t         * jid: jid,//the JID of the participant that changed his display name\n\t         * displayname: displayName //the new display name\n\t         * }}\n\t         * participantJoined - receives event notifications about new participant.\n\t         * The listener will receive object with the following structure:\n\t         * {{\n\t         * jid: jid //the jid of the participant\n\t         * }}\n\t         * participantLeft - receives event notifications about the participant that\n\t         * left the room.\n\t         * The listener will receive object with the following structure:\n\t         * {{\n\t         * jid: jid //the jid of the participant\n\t         * }}\n\t         * video-conference-joined - receives event notifications about the local\n\t         * user has successfully joined the video conference.\n\t         * The listener will receive object with the following structure:\n\t         * {{\n\t         * roomName: room //the room name of the conference\n\t         * }}\n\t         * video-conference-left - receives event notifications about the local user\n\t         * has left the video conference.\n\t         * The listener will receive object with the following structure:\n\t         * {{\n\t         * roomName: room //the room name of the conference\n\t         * }}\n\t         * readyToClose - all hangup operations are completed and Jitsi Meet is\n\t         * ready to be disposed.\n\t         * @returns {void}\n\t         *\n\t         * @deprecated\n\t         * NOTE: This method is not removed for backward comatability purposes.\n\t         */\n\t\n\t    }, {\n\t        key: 'addEventListeners',\n\t        value: function addEventListeners(listeners) {\n\t            for (var event in listeners) {\n\t                // eslint-disable-line guard-for-in\n\t                this.addEventListener(event, listeners[event]);\n\t            }\n\t        }\n\t\n\t        /**\n\t         * Removes the listeners and removes the Jitsi Meet frame.\n\t         *\n\t         * @returns {void}\n\t         */\n\t\n\t    }, {\n\t        key: 'dispose',\n\t        value: function dispose() {\n\t            if (this.postis) {\n\t                this.postis.destroy();\n\t                this.postis = null;\n\t            }\n\t            this.removeAllListeners();\n\t            if (this.iframeHolder) {\n\t                this.iframeHolder.parentNode.removeChild(this.iframeHolder);\n\t            }\n\t        }\n\t\n\t        /**\n\t         * Executes command. The available commands are:\n\t         * displayName - sets the display name of the local participant to the value\n\t         * passed in the arguments array.\n\t         * toggleAudio - mutes / unmutes audio with no arguments.\n\t         * toggleVideo - mutes / unmutes video with no arguments.\n\t         * toggleFilmStrip - hides / shows the filmstrip with no arguments.\n\t         * If the command doesn't require any arguments the parameter should be set\n\t         * to empty array or it may be omitted.\n\t         *\n\t         * @param {string} name - The name of the command.\n\t         * @returns {void}\n\t         */\n\t\n\t    }, {\n\t        key: 'executeCommand',\n\t        value: function executeCommand(name) {\n\t            for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n\t                args[_key2 - 1] = arguments[_key2];\n\t            }\n\t\n\t            if (!(name in commands)) {\n\t                logger.error('Not supported command name.');\n\t\n\t                return;\n\t            }\n\t\n\t            if (!this.postis) {\n\t                logger.error('Cannot execute command using disposed instance.');\n\t\n\t                return;\n\t            }\n\t\n\t            this.postis.send({\n\t                method: commands[name],\n\t                params: args\n\t            });\n\t        }\n\t\n\t        /**\n\t         * Executes commands. The available commands are:\n\t         * displayName - sets the display name of the local participant to the value\n\t         * passed in the arguments array.\n\t         * toggleAudio - mutes / unmutes audio. no arguments\n\t         * toggleVideo - mutes / unmutes video. no arguments\n\t         * toggleFilmStrip - hides / shows the filmstrip. no arguments\n\t         * toggleChat - hides / shows chat. no arguments.\n\t         * toggleContactList - hides / shows contact list. no arguments.\n\t         * toggleShareScreen - starts / stops screen sharing. no arguments.\n\t         *\n\t         * @param {Object} commandList - The object with commands to be executed.\n\t         * The keys of the object are the commands that will be executed and the\n\t         * values are the arguments for the command.\n\t         * @returns {void}\n\t         */\n\t\n\t    }, {\n\t        key: 'executeCommands',\n\t        value: function executeCommands(commandList) {\n\t            for (var key in commandList) {\n\t                // eslint-disable-line guard-for-in\n\t                this.executeCommand(key, commandList[key]);\n\t            }\n\t        }\n\t\n\t        /**\n\t         * Returns the number of participants in the conference. The local\n\t         * participant is included.\n\t         *\n\t         * @returns {int} The number of participants in the conference.\n\t         */\n\t\n\t    }, {\n\t        key: 'getNumberOfParticipants',\n\t        value: function getNumberOfParticipants() {\n\t            return this.numberOfParticipants;\n\t        }\n\t\n\t        /**\n\t         * Removes event listener.\n\t         *\n\t         * @param {string} event - The name of the event.\n\t         * @returns {void}\n\t         *\n\t         * @deprecated\n\t         * NOTE: This method is not removed for backward comatability purposes.\n\t         */\n\t\n\t    }, {\n\t        key: 'removeEventListener',\n\t        value: function removeEventListener(event) {\n\t            this.removeAllListeners(event);\n\t        }\n\t\n\t        /**\n\t         * Removes event listeners.\n\t         *\n\t         * @param {Array<string>} eventList - Array with the names of the events.\n\t         * @returns {void}\n\t         *\n\t         * @deprecated\n\t         * NOTE: This method is not removed for backward comatability purposes.\n\t         */\n\t\n\t    }, {\n\t        key: 'removeEventListeners',\n\t        value: function removeEventListeners(eventList) {\n\t            var _this3 = this;\n\t\n\t            eventList.forEach(function (event) {\n\t                return _this3.removeEventListener(event);\n\t            });\n\t        }\n\t    }]);\n\t\n\t    return JitsiMeetExternalAPI;\n\t}(_events2.default);\n\t\n\tmodule.exports = JitsiMeetExternalAPI;\n\t/* WEBPACK VAR INJECTION */}.call(exports, \"modules/API/external/external_api.js\"))\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t/* Copyright @ 2015 Atlassian Pty Ltd\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *     http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\t\n\t/**\n\t * Ordered log levels.\n\t */\n\tvar levels = {\n\t    \"trace\": 0,\n\t    \"debug\": 1,\n\t    \"info\": 2,\n\t    \"log\": 3,\n\t    \"warn\": 4,\n\t    \"error\": 5\n\t};\n\t\n\t/**\n\t * The default transport - console\n\t * @type LoggerTransport\n\t */\n\tLogger.consoleTransport = console;\n\t\n\t/**\n\t * The array which stores currently registered global transports.\n\t * @type {[LoggerTransport]}\n\t */\n\tvar globalTransports = [ Logger.consoleTransport ];\n\t\n\t/**\n\t * Adds given {@link LoggerTransport} instance to the list of global\n\t * transports which means that it'll be used by all {@link Logger}s\n\t * @param {LoggerTransport} transport\n\t */\n\tLogger.addGlobalTransport = function(transport) {\n\t    if (globalTransports.indexOf(transport) === -1) {\n\t        globalTransports.push(transport);\n\t    }\n\t};\n\t\n\t/**\n\t * Removes given {@link LoggerTransport} instance from the list of global\n\t * transports\n\t * @param {LoggerTransport} transport\n\t */\n\tLogger.removeGlobalTransport = function(transport) {\n\t    var transportIdx = globalTransports.indexOf(transport);\n\t    if (transportIdx !== -1) {\n\t        globalTransports.splice(transportIdx, 1);\n\t    }\n\t};\n\t\n\t/**\n\t * Parses Error's object stack trace and extracts information about the last\n\t * caller before the log method was called.\n\t * @returns JS object with info about the caller - method name, file location,\n\t * line and column.\n\t */\n\tfunction getCallerInfo() {\n\t    var callerInfo = {\n\t        methodName: \"\",\n\t        fileLocation: \"\",\n\t        line: null,\n\t        column: null\n\t    };\n\t    //gets the part of the stack without the logger wrappers\n\t    var error = new Error();\n\t    var stack = error.stack? error.stack.split(\"\\n\") : [];\n\t    if(!stack || stack.length < 1) {\n\t        return callerInfo;\n\t    }\n\t    var m = null;\n\t    if(stack[3]) {\n\t        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n\t    }\n\t    if(!m || m.length <= 4) {\n\t        //Firefox && Safari\n\t        if(stack[2].indexOf(\"log@\") === 0){\n\t            //Safari\n\t            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n\t        } else {\n\t            //Firefox\n\t            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n\t        }\n\t        return callerInfo;\n\t    }\n\t\n\t    callerInfo.methodName = m[1];\n\t    callerInfo.fileLocation = m[2];\n\t    callerInfo.line = m[3];\n\t    callerInfo.column = m[4];\n\t    return callerInfo;\n\t}\n\t\n\t/**\n\t * Logs messages using the transports and level from the logger.\n\t * @param logger a logger instance.\n\t * @param level the log level of the message. See the levels variable.\n\t * @param arguments array with arguments that will be logged.\n\t */\n\tfunction log() {\n\t    var logger = arguments[0], level = arguments[1],\n\t        args = Array.prototype.slice.call(arguments, 2);\n\t    if(levels[level] < logger.level) {\n\t        return;\n\t    }\n\t\n\t    var callerInfo = getCallerInfo();\n\t    var transports = globalTransports.concat(logger.transports);\n\t    for(var i = 0; i < transports.length; i++) {\n\t        var t = transports[i];\n\t        var l = t[level];\n\t        if(l && typeof(l) === \"function\") {\n\t            l.bind(t, logger.id? \"[\" + logger.id + \"]\" : \"\", \"<\" + callerInfo.methodName + \">: \")\n\t                .apply(t, args);\n\t        }\n\t    }\n\t}\n\t\n\t/**\n\t *\n\t * Constructs new logger object.\n\t * @param level the logging level for the new logger\n\t * @param id optional identifier for the logger instance.\n\t * @param {LoggerTransport} transports optional list of handlers(objects) for\n\t * the logs. The handlers must support - log, warn, error, debug, info, trace.\n\t * @param format optional (NOT implemented) string.\n\t */\n\tfunction Logger(level, id, transports, format) {\n\t    this.id = id;\n\t    this.format = format;\n\t    this.transports = transports;\n\t    if(!this.transports) {\n\t        this.transports = [];\n\t    }\n\t    this.level = levels[level];\n\t    var methods = Object.keys(levels);\n\t    for(var i = 0; i < methods.length; i++){\n\t        this[methods[i]] =\n\t            log.bind(null, this, methods[i]);\n\t    }\n\t}\n\t\n\t/**\n\t * Sets the log level for the logger.\n\t * @param level the new log level.\n\t */\n\tLogger.prototype.setLevel = function (level) {\n\t    this.level = levels[level];\n\t};\n\tmodule.exports = Logger;\n\t\n\t/**\n\t * Enum for the supported log levels.\n\t */\n\tLogger.levels = {\n\t    TRACE: \"trace\",\n\t    DEBUG: \"debug\",\n\t    INFO: \"info\",\n\t    LOG: \"log\",\n\t    WARN: \"warn\",\n\t    ERROR: \"error\"\n\t};\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t// Copyright Joyent, Inc. and other Node contributors.\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t// copy of this software and associated documentation files (the\n\t// \"Software\"), to deal in the Software without restriction, including\n\t// without limitation the rights to use, copy, modify, merge, publish,\n\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t// persons to whom the Software is furnished to do so, subject to the\n\t// following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included\n\t// in all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t\n\tfunction EventEmitter() {\n\t  this._events = this._events || {};\n\t  this._maxListeners = this._maxListeners || undefined;\n\t}\n\tmodule.exports = EventEmitter;\n\t\n\t// Backwards-compat with node 0.10.x\n\tEventEmitter.EventEmitter = EventEmitter;\n\t\n\tEventEmitter.prototype._events = undefined;\n\tEventEmitter.prototype._maxListeners = undefined;\n\t\n\t// By default EventEmitters will print a warning if more than 10 listeners are\n\t// added to it. This is a useful default which helps finding memory leaks.\n\tEventEmitter.defaultMaxListeners = 10;\n\t\n\t// Obviously not all Emitters should be limited to 10. This function allows\n\t// that to be increased. Set to zero for unlimited.\n\tEventEmitter.prototype.setMaxListeners = function(n) {\n\t  if (!isNumber(n) || n < 0 || isNaN(n))\n\t    throw TypeError('n must be a positive number');\n\t  this._maxListeners = n;\n\t  return this;\n\t};\n\t\n\tEventEmitter.prototype.emit = function(type) {\n\t  var er, handler, len, args, i, listeners;\n\t\n\t  if (!this._events)\n\t    this._events = {};\n\t\n\t  // If there is no 'error' event listener then throw.\n\t  if (type === 'error') {\n\t    if (!this._events.error ||\n\t        (isObject(this._events.error) && !this._events.error.length)) {\n\t      er = arguments[1];\n\t      if (er instanceof Error) {\n\t        throw er; // Unhandled 'error' event\n\t      } else {\n\t        // At least give some kind of context to the user\n\t        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n\t        err.context = er;\n\t        throw err;\n\t      }\n\t    }\n\t  }\n\t\n\t  handler = this._events[type];\n\t\n\t  if (isUndefined(handler))\n\t    return false;\n\t\n\t  if (isFunction(handler)) {\n\t    switch (arguments.length) {\n\t      // fast cases\n\t      case 1:\n\t        handler.call(this);\n\t        break;\n\t      case 2:\n\t        handler.call(this, arguments[1]);\n\t        break;\n\t      case 3:\n\t        handler.call(this, arguments[1], arguments[2]);\n\t        break;\n\t      // slower\n\t      default:\n\t        args = Array.prototype.slice.call(arguments, 1);\n\t        handler.apply(this, args);\n\t    }\n\t  } else if (isObject(handler)) {\n\t    args = Array.prototype.slice.call(arguments, 1);\n\t    listeners = handler.slice();\n\t    len = listeners.length;\n\t    for (i = 0; i < len; i++)\n\t      listeners[i].apply(this, args);\n\t  }\n\t\n\t  return true;\n\t};\n\t\n\tEventEmitter.prototype.addListener = function(type, listener) {\n\t  var m;\n\t\n\t  if (!isFunction(listener))\n\t    throw TypeError('listener must be a function');\n\t\n\t  if (!this._events)\n\t    this._events = {};\n\t\n\t  // To avoid recursion in the case that type === \"newListener\"! Before\n\t  // adding it to the listeners, first emit \"newListener\".\n\t  if (this._events.newListener)\n\t    this.emit('newListener', type,\n\t              isFunction(listener.listener) ?\n\t              listener.listener : listener);\n\t\n\t  if (!this._events[type])\n\t    // Optimize the case of one listener. Don't need the extra array object.\n\t    this._events[type] = listener;\n\t  else if (isObject(this._events[type]))\n\t    // If we've already got an array, just append.\n\t    this._events[type].push(listener);\n\t  else\n\t    // Adding the second element, need to change to array.\n\t    this._events[type] = [this._events[type], listener];\n\t\n\t  // Check for listener leak\n\t  if (isObject(this._events[type]) && !this._events[type].warned) {\n\t    if (!isUndefined(this._maxListeners)) {\n\t      m = this._maxListeners;\n\t    } else {\n\t      m = EventEmitter.defaultMaxListeners;\n\t    }\n\t\n\t    if (m && m > 0 && this._events[type].length > m) {\n\t      this._events[type].warned = true;\n\t      console.error('(node) warning: possible EventEmitter memory ' +\n\t                    'leak detected. %d listeners added. ' +\n\t                    'Use emitter.setMaxListeners() to increase limit.',\n\t                    this._events[type].length);\n\t      if (typeof console.trace === 'function') {\n\t        // not supported in IE 10\n\t        console.trace();\n\t      }\n\t    }\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\tEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\t\n\tEventEmitter.prototype.once = function(type, listener) {\n\t  if (!isFunction(listener))\n\t    throw TypeError('listener must be a function');\n\t\n\t  var fired = false;\n\t\n\t  function g() {\n\t    this.removeListener(type, g);\n\t\n\t    if (!fired) {\n\t      fired = true;\n\t      listener.apply(this, arguments);\n\t    }\n\t  }\n\t\n\t  g.listener = listener;\n\t  this.on(type, g);\n\t\n\t  return this;\n\t};\n\t\n\t// emits a 'removeListener' event iff the listener was removed\n\tEventEmitter.prototype.removeListener = function(type, listener) {\n\t  var list, position, length, i;\n\t\n\t  if (!isFunction(listener))\n\t    throw TypeError('listener must be a function');\n\t\n\t  if (!this._events || !this._events[type])\n\t    return this;\n\t\n\t  list = this._events[type];\n\t  length = list.length;\n\t  position = -1;\n\t\n\t  if (list === listener ||\n\t      (isFunction(list.listener) && list.listener === listener)) {\n\t    delete this._events[type];\n\t    if (this._events.removeListener)\n\t      this.emit('removeListener', type, listener);\n\t\n\t  } else if (isObject(list)) {\n\t    for (i = length; i-- > 0;) {\n\t      if (list[i] === listener ||\n\t          (list[i].listener && list[i].listener === listener)) {\n\t        position = i;\n\t        break;\n\t      }\n\t    }\n\t\n\t    if (position < 0)\n\t      return this;\n\t\n\t    if (list.length === 1) {\n\t      list.length = 0;\n\t      delete this._events[type];\n\t    } else {\n\t      list.splice(position, 1);\n\t    }\n\t\n\t    if (this._events.removeListener)\n\t      this.emit('removeListener', type, listener);\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\tEventEmitter.prototype.removeAllListeners = function(type) {\n\t  var key, listeners;\n\t\n\t  if (!this._events)\n\t    return this;\n\t\n\t  // not listening for removeListener, no need to emit\n\t  if (!this._events.removeListener) {\n\t    if (arguments.length === 0)\n\t      this._events = {};\n\t    else if (this._events[type])\n\t      delete this._events[type];\n\t    return this;\n\t  }\n\t\n\t  // emit removeListener for all listeners on all events\n\t  if (arguments.length === 0) {\n\t    for (key in this._events) {\n\t      if (key === 'removeListener') continue;\n\t      this.removeAllListeners(key);\n\t    }\n\t    this.removeAllListeners('removeListener');\n\t    this._events = {};\n\t    return this;\n\t  }\n\t\n\t  listeners = this._events[type];\n\t\n\t  if (isFunction(listeners)) {\n\t    this.removeListener(type, listeners);\n\t  } else if (listeners) {\n\t    // LIFO order\n\t    while (listeners.length)\n\t      this.removeListener(type, listeners[listeners.length - 1]);\n\t  }\n\t  delete this._events[type];\n\t\n\t  return this;\n\t};\n\t\n\tEventEmitter.prototype.listeners = function(type) {\n\t  var ret;\n\t  if (!this._events || !this._events[type])\n\t    ret = [];\n\t  else if (isFunction(this._events[type]))\n\t    ret = [this._events[type]];\n\t  else\n\t    ret = this._events[type].slice();\n\t  return ret;\n\t};\n\t\n\tEventEmitter.prototype.listenerCount = function(type) {\n\t  if (this._events) {\n\t    var evlistener = this._events[type];\n\t\n\t    if (isFunction(evlistener))\n\t      return 1;\n\t    else if (evlistener)\n\t      return evlistener.length;\n\t  }\n\t  return 0;\n\t};\n\t\n\tEventEmitter.listenerCount = function(emitter, type) {\n\t  return emitter.listenerCount(type);\n\t};\n\t\n\tfunction isFunction(arg) {\n\t  return typeof arg === 'function';\n\t}\n\t\n\tfunction isNumber(arg) {\n\t  return typeof arg === 'number';\n\t}\n\t\n\tfunction isObject(arg) {\n\t  return typeof arg === 'object' && arg !== null;\n\t}\n\t\n\tfunction isUndefined(arg) {\n\t  return arg === void 0;\n\t}\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* Copyright @ 2016 Atlassian Pty Ltd\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *     http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\tvar Logger = __webpack_require__(1);\n\t\n\t/**\n\t * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n\t * and thus can be added as global transport in order to capture all the logs.\n\t *\n\t * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n\t * a message and stores them in a queue in order to batch log entries. There are\n\t * time and size limit constraints which determine how often batch entries are\n\t * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n\t * will use the <tt>logStorage</tt> object given as an argument to save\n\t * the batch log entry.\n\t *\n\t * @param {Object} logStorage an object which allows to store the logs collected\n\t * @param {function(string|object[])} logStorage.storeLogs a method called when\n\t * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n\t * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n\t * item is an object it means that it's an aggregated message. That is a message\n\t * which is the same as the previous one and it's representation has\n\t * the following format:\n\t * {\n\t *   {string} text: 'the text of some duplicated message'\n\t *   {number} count: 3 // how many times the message appeared in a row\n\t * }\n\t * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n\t * the sequence of \"A\". Which means that even if the next message \"C\" is\n\t * the same as \"A\" it will start a new aggregated message \"C\".\n\t * @param {function()} logStorage.isReady a method which should return\n\t * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n\t * time storage is not ready log batches will be cached and stored on the next\n\t * occasion (flush or interval timeout).\n\t *\n\t * @param {Object} options the <tt>LogCollector</tt> configuration options.\n\t * @param {number} options.maxEntryLength the size limit for a single log entry\n\t * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n\t * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n\t * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n\t * storage becomes ready. Note that the \"is ready\" condition is checked every\n\t * <tt>options.storeInterval</tt> milliseconds.\n\t * @param {number} options.storeInterval how often the logs should be stored in\n\t * case <tt>maxEntryLength</tt> was not exceeded.\n\t * @param {boolean} options.stringifyObjects indicates whether or not object\n\t * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n\t * message is composed. Note that objects logged on the error log level are\n\t * always stringified.\n\t *\n\t * @constructor\n\t */\n\tfunction LogCollector(logStorage, options) {\n\t    this.logStorage = logStorage;\n\t    this.stringifyObjects\n\t        = options && options.stringifyObjects\n\t            ? options.stringifyObjects : false;\n\t    this.storeInterval\n\t        = options && options.storeInterval\n\t            ? options.storeInterval: 30000;\n\t    this.maxEntryLength\n\t        = options && options.maxEntryLength\n\t            ? options.maxEntryLength : 10000;\n\t    // Bind the log method for each level to the corresponding method name\n\t    // in order to implement \"global log transport\" object.\n\t    Object.keys(Logger.levels).forEach(\n\t    function (logLevel) {\n\t        var methodName = Logger.levels[logLevel];\n\t        this[methodName] = function (logLevel) {\n\t            this._log.apply(this, arguments);\n\t        }.bind(this, logLevel);\n\t    }.bind(this));\n\t    /**\n\t     * The ID of store logs interval if one is currently scheduled or\n\t     * <tt>null</tt> otherwise.\n\t     * @type {number|null}\n\t     */\n\t    this.storeLogsIntervalID = null;\n\t    /**\n\t     * The log messages that are to be batched into log entry when\n\t     * {@link LogCollector._flush} method is called.\n\t     * @type {string[]}\n\t     */\n\t    this.queue = [];\n\t    /**\n\t     * The total length of all messages currently stored in the {@link queue}.\n\t     * @type {number}\n\t     */\n\t    this.totalLen = 0;\n\t    /**\n\t     * An array used to temporarily store log batches, before the storage gets\n\t     * ready.\n\t     * @type {string[]}\n\t     */\n\t    this.outputCache = [];\n\t}\n\t\n\t/**\n\t * Method called inside of {@link formatLogMessage} in order to covert an\n\t * <tt>Object</tt> argument to string. The conversion will happen when either\n\t * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n\t * log level. The default implementation uses <tt>JSON.stringify</tt> and\n\t * returns \"[object with circular refs?]\" instead of an object if it fails.\n\t *\n\t * @param {object} someObject the <tt>object</tt> to be stringified.\n\t *\n\t * @return {string} the result of <tt>JSON.stringify</tt> or\n\t * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n\t *\n\t * @protected\n\t */\n\tLogCollector.prototype.stringify = function (someObject) {\n\t    try {\n\t        return JSON.stringify(someObject);\n\t    } catch (error) {\n\t        return \"[object with circular refs?]\";\n\t    }\n\t};\n\t\n\t/**\n\t * Formats log entry for the given logging level and arguments passed to the\n\t * <tt>Logger</tt>'s log method. The first argument is log level and the next\n\t * arguments have to be captured using JS built-in 'arguments' variable.\n\t *\n\t * @param {Logger.levels} logLevel provides the logging level of the message to\n\t * be logged.\n\t *\n\t * @return {string|null} a non-empty string representation of the log entry\n\t * crafted from the log arguments. If the return value is <tt>null</tt> then\n\t * the message wil be discarded by this <tt>LogCollector</tt>.\n\t *\n\t * @protected\n\t */\n\tLogCollector.prototype.formatLogMessage\n\t= function (logLevel/*, arg1, arg2, arg3... */) {\n\t    var msg = '';\n\t    for (var i = 1, len = arguments.length; i < len; i++) {\n\t        var arg = arguments[i];\n\t        // objects logged on error level are always converted to JSON\n\t        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR)\n\t            && typeof arg === 'object') {\n\t            arg = this.stringify(arg);\n\t        }\n\t        msg += arg;\n\t        if (i != len - 1) {\n\t            msg += ' ';\n\t        }\n\t    }\n\t    return msg.length ? msg : null;\n\t};\n\t\n\t/**\n\t * The log method bound to each of the logging levels in order to implement\n\t * \"global log transport\" object.\n\t *\n\t * @private\n\t */\n\tLogCollector.prototype._log = function() {\n\t\n\t    // var logLevel = arguments[0]; first argument is the log level\n\t    var msg = this.formatLogMessage.apply(this, arguments);\n\t    if (msg) {\n\t        // The same as the previous message aggregation logic\n\t        var prevMessage\n\t            = this.queue.length ? this.queue[this.queue.length -1] : undefined;\n\t        // NOTE that typeof undefined is 'undefined'\n\t        var prevMessageText\n\t            = typeof prevMessage === 'object' ? prevMessage.text : prevMessage;\n\t        // Is it the same as the previous one ?\n\t        if (prevMessageText == msg) {\n\t            if (typeof prevMessage === 'object') {\n\t                prevMessage.count += 1;\n\t            } else {\n\t                this.queue[this.queue.length-1] = {\n\t                    text: msg,\n\t                    count: 2\n\t                }\n\t            }\n\t        } else {\n\t            this.queue.push(msg);\n\t            this.totalLen += msg.length;\n\t        }\n\t    }\n\t\n\t    if (this.totalLen >= this.maxEntryLength) {\n\t        this._flush(true /* force */, true /* reschedule */);\n\t    }\n\t};\n\t\n\t/**\n\t * Starts periodical \"store logs\" task which will be triggered at the interval\n\t * specified in the constructor options.\n\t */\n\tLogCollector.prototype.start = function () {\n\t    this._reschedulePublishInterval();\n\t};\n\t\n\t/**\n\t * Reschedules the periodical \"store logs\" task which will store the next batch\n\t * log entry in the storage.\n\t * @private\n\t */\n\tLogCollector.prototype._reschedulePublishInterval = function () {\n\t    if (this.storeLogsIntervalID) {\n\t        window.clearTimeout(this.storeLogsIntervalID);\n\t        this.storeLogsIntervalID = null;\n\t    }\n\t    // It's actually a timeout, because it is rescheduled on every flush\n\t    this.storeLogsIntervalID\n\t        = window.setTimeout(\n\t            this._flush.bind(\n\t                this, false /* do not force */, true /* reschedule */),\n\t            this.storeInterval);\n\t};\n\t\n\t/**\n\t * Call this method to flush the log entry buffer and store it in the log\n\t * storage immediately (given that the storage is ready).\n\t */\n\tLogCollector.prototype.flush = function() {\n\t    this._flush(\n\t        false /* do not force, as it will not be stored anyway */,\n\t        true /* reschedule next update */ )\n\t};\n\t\n\t/**\n\t * Stores the next batch log entry in the log storage.\n\t * @param {boolean} force enforce current logs batch to be stored or cached if\n\t * there is anything to be logged, but the storage is not ready yet. One of\n\t * legitimate reasons to force is when the logs length exceeds size limit which\n\t * could result in truncation.\n\t * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n\t * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n\t * task cycle.\n\t * @private\n\t */\n\tLogCollector.prototype._flush = function(force, reschedule) {\n\t    // Publish only if there's anything to be logged\n\t    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n\t        //FIXME avoid truncating\n\t        // right now we don't care if the message size is \"slightly\" exceeded\n\t        if (this.logStorage.isReady()) {\n\t            // Sends all cached logs\n\t            if (this.outputCache.length) {\n\t                this.outputCache.forEach(\n\t                    function (cachedQueue) {\n\t                        this.logStorage.storeLogs(cachedQueue);\n\t                    }.bind(this)\n\t                );\n\t                // Clear the cache\n\t                this.outputCache = [];\n\t            }\n\t            // Send current batch\n\t            this.logStorage.storeLogs(this.queue);\n\t        } else {\n\t            this.outputCache.push(this.queue);\n\t        }\n\t\n\t        this.queue = [];\n\t        this.totalLen = 0;\n\t    }\n\t\n\t    if (reschedule) {\n\t        this._reschedulePublishInterval();\n\t    }\n\t};\n\t\n\t/**\n\t * Stops the periodical \"store logs\" task and immediately stores any pending\n\t * log entries as a batch.\n\t */\n\tLogCollector.prototype.stop = function() {\n\t    // Flush and stop publishing logs\n\t    this._flush(false /* do not force */, false /* do not reschedule */);\n\t};\n\t\n\tmodule.exports = LogCollector;\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* Copyright @ 2015 Atlassian Pty Ltd\n\t *\n\t * Licensed under the Apache License, Version 2.0 (the \"License\");\n\t * you may not use this file except in compliance with the License.\n\t * You may obtain a copy of the License at\n\t *\n\t *     http://www.apache.org/licenses/LICENSE-2.0\n\t *\n\t * Unless required by applicable law or agreed to in writing, software\n\t * distributed under the License is distributed on an \"AS IS\" BASIS,\n\t * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t * See the License for the specific language governing permissions and\n\t * limitations under the License.\n\t */\n\tvar Logger = __webpack_require__(1);\n\tvar LogCollector = __webpack_require__(3);\n\t\n\t/**\n\t * Definition of the log method\n\t * @name log_method\n\t * @function\n\t * @param {...*} log_args the arguments to be logged\n\t */\n\t/**\n\t * The logger's transport type definition.\n\t *\n\t * @typedef {object} LoggerTransport\n\t *\n\t * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n\t * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n\t * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n\t * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n\t * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n\t * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n\t */\n\t\n\t/**\n\t * Map with the created loggers with ID.\n\t */\n\tvar idLoggers = {};\n\t\n\t/**\n\t * Array with the loggers without id.\n\t */\n\tvar loggers = [];\n\t\n\t/**\n\t * Log level for the lbrary.\n\t */\n\tvar curLevel = Logger.levels.TRACE;\n\t\n\t\n\tmodule.exports = {\n\t    /**\n\t     * Adds given {@link LoggerTransport} instance to the list of global\n\t     * transports which means that it'll be used by all {@link Logger}s\n\t     * @param {LoggerTransport} transport\n\t     */\n\t    addGlobalTransport: function(transport) {\n\t        Logger.addGlobalTransport(transport);\n\t    },\n\t    /**\n\t     * Removes given {@link LoggerTransport} instance from the list of global\n\t     * transports\n\t     * @param {LoggerTransport} transport\n\t     */\n\t    removeGlobalTransport: function(transport) {\n\t        Logger.removeGlobalTransport(transport);\n\t    },\n\t    /**\n\t     * Creates new logger.\n\t     * @arguments the same as Logger constructor\n\t     */\n\t    getLogger: function(id, transports, format) {\n\t        var logger = new Logger(curLevel, id, transports, format);\n\t        if(id) {\n\t            idLoggers[id] = idLoggers[id] || [];\n\t            idLoggers[id].push(logger);\n\t        } else {\n\t            loggers.push(logger);\n\t        }\n\t        return logger;\n\t    },\n\t    /**\n\t     * Changes the log level for the existing loggers by id.\n\t     * @param level the new log level.\n\t     * @param id if specified the level will be changed only for loggers with the\n\t     * same id. Otherwise the operation will affect all loggers that don't\n\t     * have id.\n\t     */\n\t    setLogLevelById: function(level, id) {\n\t        var l = id? (idLoggers[id] || []) : loggers;\n\t        for(var i = 0; i < l.length; i++) {\n\t            l[i].setLevel(level);\n\t        }\n\t    },\n\t    /**\n\t     * Changes the log level for all existing loggers.\n\t     * @param level the new log level.\n\t     */\n\t    setLogLevel: function (level) {\n\t        curLevel = level;\n\t        var i = 0;\n\t        for(; i < loggers.length; i++) {\n\t            loggers[i].setLevel(level);\n\t        }\n\t\n\t        for(var id in idLoggers) {\n\t            var l = idLoggers[id] || [];\n\t            for(i = 0; i < l.length; i++) {\n\t                l[i].setLevel(level);\n\t            }\n\t        }\n\t    },\n\t    /**\n\t     * The supported log levels.\n\t     */\n\t    levels: Logger.levels,\n\t    /**\n\t     * Exports the <tt>LogCollector</tt>.\n\t     */\n\t    LogCollector: LogCollector\n\t};\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\tfunction Postis(options) {\n\t  var scope = options.scope;\n\t  var targetWindow = options.window;\n\t  var windowForEventListening = options.windowForEventListening || window;\n\t  var listeners = {};\n\t  var sendBuffer = [];\n\t  var listenBuffer = {};\n\t  var ready = false;\n\t  var readyMethod = \"__ready__\";\n\t  var readynessCheck;\n\t\n\t  var listener = function(event) {\n\t    var data;\n\t    try {\n\t      data = JSON.parse(event.data);\n\t    } catch (e) {\n\t      return;\n\t    }\n\t\n\t    if (data.postis && data.scope === scope) {\n\t      var listenersForMethod = listeners[data.method];\n\t      if (listenersForMethod) {\n\t        for (var i = 0; i < listenersForMethod.length; i++) {\n\t          listenersForMethod[i].call(null, data.params);\n\t        }\n\t      } else {\n\t        listenBuffer[data.method] = listenBuffer[data.method] || [];\n\t        listenBuffer[data.method].push(data.params);\n\t      }\n\t    }\n\t  };\n\t\n\t  windowForEventListening.addEventListener(\"message\", listener, false);\n\t\n\t  var postis = {\n\t    listen: function (method, callback) {\n\t      listeners[method] = listeners[method] || [];\n\t      listeners[method].push(callback);\n\t\n\t      var listenBufferForMethod = listenBuffer[method];\n\t      if (listenBufferForMethod) {\n\t        var listenersForMethod = listeners[method];\n\t        for (var i = 0; i < listenersForMethod.length; i++) {\n\t          for (var j = 0; j < listenBufferForMethod.length; j++) {\n\t            listenersForMethod[i].call(null, listenBufferForMethod[j]);\n\t          }\n\t        }\n\t      }\n\t      delete listenBuffer[method];\n\t    },\n\t\n\t    send: function (opts) {\n\t      var method = opts.method;\n\t\n\t      if ((ready || opts.method === readyMethod) && (targetWindow && typeof targetWindow.postMessage === \"function\")) {\n\t        targetWindow.postMessage(JSON.stringify({\n\t          postis: true,\n\t          scope: scope,\n\t          method: method,\n\t          params: opts.params\n\t        }), \"*\");\n\t      } else {\n\t        sendBuffer.push(opts);\n\t      }\n\t    },\n\t\n\t    ready: function (callback) {\n\t      if (ready) {\n\t        callback();\n\t      } else {\n\t        setTimeout(function () { postis.ready(callback); }, 50);\n\t      }\n\t    },\n\t\n\t    destroy: function (callback) {\n\t      clearInterval(readynessCheck);\n\t      ready = false;\n\t      if (windowForEventListening && typeof windowForEventListening.removeEventListener === \"function\") {\n\t        windowForEventListening.removeEventListener(\"message\", listener);\n\t      }\n\t      callback && callback();\n\t    }\n\t  };\n\t\n\t  var readyCheckID = +new Date() + Math.random() + \"\";\n\t\n\t  readynessCheck = setInterval(function () {\n\t    postis.send({\n\t      method: readyMethod,\n\t      params: readyCheckID\n\t    });\n\t  }, 50);\n\t\n\t  postis.listen(readyMethod, function (id) {\n\t    if (id === readyCheckID) {\n\t      clearInterval(readynessCheck);\n\t      ready = true;\n\t\n\t      for (var i = 0; i < sendBuffer.length; i++) {\n\t        postis.send(sendBuffer[i]);\n\t      }\n\t      sendBuffer = [];\n\t    } else {\n\t      postis.send({\n\t        method: readyMethod,\n\t        params: id\n\t      });\n\t    }\n\t  });\n\t\n\t  return postis;\n\t}\n\t\n\tmodule.exports = Postis;\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// external_api.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/libs/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 134667281e3349250335","import EventEmitter from 'events';\nimport postisInit from 'postis';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Maps the names of the commands expected by the API with the name of the\n * commands expected by jitsi-meet\n */\nconst commands = {\n    avatarUrl: 'avatar-url',\n    displayName: 'display-name',\n    email: 'email',\n    hangup: 'video-hangup',\n    toggleAudio: 'toggle-audio',\n    toggleChat: 'toggle-chat',\n    toggleContactList: 'toggle-contact-list',\n    toggleFilmStrip: 'toggle-film-strip',\n    toggleShareScreen: 'toggle-share-screen',\n    toggleVideo: 'toggle-video'\n};\n\n/**\n * Maps the names of the events expected by the API with the name of the\n * events expected by jitsi-meet\n */\nconst events = {\n    displayNameChange: 'display-name-change',\n    incomingMessage: 'incoming-message',\n    outgoingMessage: 'outgoing-message',\n    participantJoined: 'participant-joined',\n    participantLeft: 'participant-left',\n    readyToClose: 'video-ready-to-close',\n    videoConferenceJoined: 'video-conference-joined',\n    videoConferenceLeft: 'video-conference-left'\n};\n\n/**\n * Last id of api object\n * @type {number}\n */\nlet id = 0;\n\n/**\n * The minimum height for the Jitsi Meet frame\n * @type {number}\n */\nconst MIN_HEIGHT = 300;\n\n/**\n * The minimum width for the Jitsi Meet frame\n * @type {number}\n */\nconst MIN_WIDTH = 790;\n\n/**\n * Adds given number to the numberOfParticipants property of given APIInstance.\n *\n * @param {JitsiMeetExternalAPI} APIInstance - The instance of the API.\n * @param {int} number - The number of participants to be added to\n * numberOfParticipants property (this parameter can be negative number if the\n * numberOfParticipants should be decreased).\n * @returns {void}\n */\nfunction changeParticipantNumber(APIInstance, number) {\n    APIInstance.numberOfParticipants += number;\n}\n\n/**\n * Generates array with URL params based on the passed config object that will\n * be used for the Jitsi Meet URL generation.\n *\n * @param {Object} config - The config object.\n * @returns {Array<string>} The array with URL param strings.\n */\nfunction configToURLParamsArray(config = {}) {\n    const params = [];\n\n    for (const key in config) { // eslint-disable-line guard-for-in\n        try {\n            params.push(`${key}=${\n                encodeURIComponent(JSON.stringify(config[key]))}`);\n        } catch (e) {\n            console.warn(`Error encoding ${key}: ${e}`);\n        }\n    }\n\n    return params;\n}\n\n/**\n * Generates the URL for the iframe.\n *\n * @param {string} domain - The domain name of the server that hosts the\n * conference.\n * @param {string} [options] - Another optional parameters.\n * @param {Object} [options.configOverwrite] - Object containing configuration\n * options defined in config.js to be overridden.\n * @param {Object} [options.interfaceConfigOverwrite] - Object containing\n * configuration options defined in interface_config.js to be overridden.\n * @param {string} [options.jwt] - The JWT token if needed by jitsi-meet for\n * authentication.\n * @param {boolean} [options.noSsl] - If the value is true https won't be used.\n * @param {string} [options.roomName] - The name of the room to join.\n * @returns {string} The URL.\n */\nfunction generateURL(domain, options = {}) {\n    const {\n        configOverwrite,\n        interfaceConfigOverwrite,\n        jwt,\n        noSSL,\n        roomName\n    } = options;\n\n    let url = `${noSSL ? 'http' : 'https'}://${domain}/${roomName || ''}`;\n\n    if (jwt) {\n        url += `?jwt=${jwt}`;\n    }\n\n    url += `#jitsi_meet_external_api_id=${id}`;\n\n    const configURLParams = configToURLParamsArray(configOverwrite);\n\n    if (configURLParams.length) {\n        url += `&config.${configURLParams.join('&config.')}`;\n    }\n\n    const interfaceConfigURLParams\n        = configToURLParamsArray(interfaceConfigOverwrite);\n\n    if (interfaceConfigURLParams.length) {\n        url += `&interfaceConfig.${\n            interfaceConfigURLParams.join('&interfaceConfig.')}`;\n    }\n\n    return url;\n}\n\n/**\n * The IFrame API interface class.\n */\nclass JitsiMeetExternalAPI extends EventEmitter {\n    /**\n     * Constructs new API instance. Creates iframe and loads Jitsi Meet in it.\n     *\n     * @param {string} domain - The domain name of the server that hosts the\n     * conference.\n     * @param {string} [roomName] - The name of the room to join.\n     * @param {number} [width] - Width of the iframe.\n     * @param {number} [height] - Height of the iframe.\n     * @param {DOMElement} [parentNode] - The node that will contain the\n     * iframe.\n     * @param {Object} [configOverwrite] - Object containing configuration\n     * options defined in config.js to be overridden.\n     * @param {Object} [interfaceConfigOverwrite] - Object containing\n     * configuration options defined in interface_config.js to be overridden.\n     * @param {boolean} [noSSL] - If the value is true https won't be used.\n     * @param {string} [jwt] - The JWT token if needed by jitsi-meet for\n     * authentication.\n     */\n    constructor(domain, // eslint-disable-line max-params\n        roomName = '',\n        width = MIN_WIDTH,\n        height = MIN_HEIGHT,\n        parentNode = document.body,\n        configOverwrite = {},\n        interfaceConfigOverwrite = {},\n        noSSL = false,\n        jwt = undefined) {\n        super();\n        this.parentNode = parentNode;\n        this.url = generateURL(domain, {\n            configOverwrite,\n            interfaceConfigOverwrite,\n            jwt,\n            noSSL,\n            roomName\n        });\n        this._createIFrame(Math.max(height, MIN_HEIGHT),\n            Math.max(width, MIN_WIDTH));\n        this.postis = postisInit({\n            scope: `jitsi_meet_external_api_${id}`,\n            window: this.frame.contentWindow\n        });\n        this.numberOfParticipants = 1;\n        this._setupListeners();\n        id++;\n    }\n\n    /**\n     * Creates the iframe element.\n     *\n     * @param {number} height - The height of the iframe.\n     * @param {number} width - The with of the iframe.\n     * @returns {void}\n     *\n     * @private\n     */\n    _createIFrame(height, width) {\n        this.iframeHolder\n            = this.parentNode.appendChild(document.createElement('div'));\n        this.iframeHolder.id = `jitsiConference${id}`;\n        this.iframeHolder.style.width = `${width}px`;\n        this.iframeHolder.style.height = `${height}px`;\n\n        this.frameName = `jitsiConferenceFrame${id}`;\n\n        this.frame = document.createElement('iframe');\n        this.frame.src = this.url;\n        this.frame.name = this.frameName;\n        this.frame.id = this.frameName;\n        this.frame.width = '100%';\n        this.frame.height = '100%';\n        this.frame.setAttribute('allowFullScreen', 'true');\n        this.frame = this.iframeHolder.appendChild(this.frame);\n    }\n\n    /**\n     * Setups listeners that are used internally for JitsiMeetExternalAPI.\n     *\n     * @returns {void}\n     *\n     * @private\n     */\n    _setupListeners() {\n        this.postis.listen('participant-joined',\n            changeParticipantNumber.bind(null, this, 1));\n        this.postis.listen('participant-left',\n            changeParticipantNumber.bind(null, this, -1));\n\n        for (const eventName in events) { // eslint-disable-line guard-for-in\n            const postisMethod = events[eventName];\n\n            this.postis.listen(postisMethod,\n                (...args) => this.emit(eventName, ...args));\n        }\n    }\n\n    /**\n     * Adds event listener to Meet Jitsi.\n     *\n     * @param {string} event - The name of the event.\n     * @param {Function} listener - The listener.\n     * @returns {void}\n     *\n     * @deprecated\n     * NOTE: This method is not removed for backward comatability purposes.\n     */\n    addEventListener(event, listener) {\n        this.on(event, listener);\n    }\n\n    /**\n     * Adds event listeners to Meet Jitsi.\n     *\n     * @param {Object} listeners - The object key should be the name of\n     * the event and value - the listener.\n     * Currently we support the following\n     * events:\n     * incomingMessage - receives event notifications about incoming\n     * messages. The listener will receive object with the following structure:\n     * {{\n     *  'from': from,//JID of the user that sent the message\n     *  'nick': nick,//the nickname of the user that sent the message\n     *  'message': txt//the text of the message\n     * }}\n     * outgoingMessage - receives event notifications about outgoing\n     * messages. The listener will receive object with the following structure:\n     * {{\n     *  'message': txt//the text of the message\n     * }}\n     * displayNameChanged - receives event notifications about display name\n     * change. The listener will receive object with the following structure:\n     * {{\n     * jid: jid,//the JID of the participant that changed his display name\n     * displayname: displayName //the new display name\n     * }}\n     * participantJoined - receives event notifications about new participant.\n     * The listener will receive object with the following structure:\n     * {{\n     * jid: jid //the jid of the participant\n     * }}\n     * participantLeft - receives event notifications about the participant that\n     * left the room.\n     * The listener will receive object with the following structure:\n     * {{\n     * jid: jid //the jid of the participant\n     * }}\n     * video-conference-joined - receives event notifications about the local\n     * user has successfully joined the video conference.\n     * The listener will receive object with the following structure:\n     * {{\n     * roomName: room //the room name of the conference\n     * }}\n     * video-conference-left - receives event notifications about the local user\n     * has left the video conference.\n     * The listener will receive object with the following structure:\n     * {{\n     * roomName: room //the room name of the conference\n     * }}\n     * readyToClose - all hangup operations are completed and Jitsi Meet is\n     * ready to be disposed.\n     * @returns {void}\n     *\n     * @deprecated\n     * NOTE: This method is not removed for backward comatability purposes.\n     */\n    addEventListeners(listeners) {\n        for (const event in listeners) { // eslint-disable-line guard-for-in\n            this.addEventListener(event, listeners[event]);\n        }\n    }\n\n    /**\n     * Removes the listeners and removes the Jitsi Meet frame.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        if (this.postis) {\n            this.postis.destroy();\n            this.postis = null;\n        }\n        this.removeAllListeners();\n        if (this.iframeHolder) {\n            this.iframeHolder.parentNode.removeChild(this.iframeHolder);\n        }\n    }\n\n    /**\n     * Executes command. The available commands are:\n     * displayName - sets the display name of the local participant to the value\n     * passed in the arguments array.\n     * toggleAudio - mutes / unmutes audio with no arguments.\n     * toggleVideo - mutes / unmutes video with no arguments.\n     * toggleFilmStrip - hides / shows the filmstrip with no arguments.\n     * If the command doesn't require any arguments the parameter should be set\n     * to empty array or it may be omitted.\n     *\n     * @param {string} name - The name of the command.\n     * @returns {void}\n     */\n    executeCommand(name, ...args) {\n        if (!(name in commands)) {\n            logger.error('Not supported command name.');\n\n            return;\n        }\n\n        if (!this.postis) {\n            logger.error('Cannot execute command using disposed instance.');\n\n            return;\n        }\n\n        this.postis.send({\n            method: commands[name],\n            params: args\n        });\n    }\n\n    /**\n     * Executes commands. The available commands are:\n     * displayName - sets the display name of the local participant to the value\n     * passed in the arguments array.\n     * toggleAudio - mutes / unmutes audio. no arguments\n     * toggleVideo - mutes / unmutes video. no arguments\n     * toggleFilmStrip - hides / shows the filmstrip. no arguments\n     * toggleChat - hides / shows chat. no arguments.\n     * toggleContactList - hides / shows contact list. no arguments.\n     * toggleShareScreen - starts / stops screen sharing. no arguments.\n     *\n     * @param {Object} commandList - The object with commands to be executed.\n     * The keys of the object are the commands that will be executed and the\n     * values are the arguments for the command.\n     * @returns {void}\n     */\n    executeCommands(commandList) {\n        for (const key in commandList) { // eslint-disable-line guard-for-in\n            this.executeCommand(key, commandList[key]);\n        }\n    }\n\n    /**\n     * Returns the number of participants in the conference. The local\n     * participant is included.\n     *\n     * @returns {int} The number of participants in the conference.\n     */\n    getNumberOfParticipants() {\n        return this.numberOfParticipants;\n    }\n\n    /**\n     * Removes event listener.\n     *\n     * @param {string} event - The name of the event.\n     * @returns {void}\n     *\n     * @deprecated\n     * NOTE: This method is not removed for backward comatability purposes.\n     */\n    removeEventListener(event) {\n        this.removeAllListeners(event);\n    }\n\n    /**\n     * Removes event listeners.\n     *\n     * @param {Array<string>} eventList - Array with the names of the events.\n     * @returns {void}\n     *\n     * @deprecated\n     * NOTE: This method is not removed for backward comatability purposes.\n     */\n    removeEventListeners(eventList) {\n        eventList.forEach(event => this.removeEventListener(event));\n    }\n}\n\nmodule.exports = JitsiMeetExternalAPI;\n\n\n\n// WEBPACK FOOTER //\n// ./modules/API/external/external_api.js","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 1) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo = getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            l.bind(t, logger.id? \"[\" + logger.id + \"]\" : \"\", \"<\" + callerInfo.methodName + \">: \")\n                .apply(t, args);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param format optional (NOT implemented) string.\n */\nfunction Logger(level, id, transports, format) {\n    this.id = id;\n    this.format = format;\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/jitsi-meet-logger/lib/Logger.js\n// module id = 1\n// module chunks = 0","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/events/events.js\n// module id = 2\n// module chunks = 0","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects\n        = options && options.stringifyObjects\n            ? options.stringifyObjects : false;\n    this.storeInterval\n        = options && options.storeInterval\n            ? options.storeInterval: 30000;\n    this.maxEntryLength\n        = options && options.maxEntryLength\n            ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function (logLevel) {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return \"[object with circular refs?]\";\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage\n= function (logLevel/*, arg1, arg2, arg3... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR)\n            && typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i != len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage\n            = this.queue.length ? this.queue[this.queue.length -1] : undefined;\n        // NOTE that typeof undefined is 'undefined'\n        var prevMessageText\n            = typeof prevMessage === 'object' ? prevMessage.text : prevMessage;\n        // Is it the same as the previous one ?\n        if (prevMessageText == msg) {\n            if (typeof prevMessage === 'object') {\n                prevMessage.count += 1;\n            } else {\n                this.queue[this.queue.length-1] = {\n                    text: msg,\n                    count: 2\n                }\n            }\n        } else {\n            this.queue.push(msg);\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID\n        = window.setTimeout(\n            this._flush.bind(\n                this, false /* do not force */, true /* reschedule */),\n            this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ )\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/jitsi-meet-logger/lib/LogCollector.js\n// module id = 3\n// module chunks = 0","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, format) {\n        var logger = new Logger(curLevel, id, transports, format);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/jitsi-meet-logger/lib/index.js\n// module id = 4\n// module chunks = 0","function Postis(options) {\n  var scope = options.scope;\n  var targetWindow = options.window;\n  var windowForEventListening = options.windowForEventListening || window;\n  var listeners = {};\n  var sendBuffer = [];\n  var listenBuffer = {};\n  var ready = false;\n  var readyMethod = \"__ready__\";\n  var readynessCheck;\n\n  var listener = function(event) {\n    var data;\n    try {\n      data = JSON.parse(event.data);\n    } catch (e) {\n      return;\n    }\n\n    if (data.postis && data.scope === scope) {\n      var listenersForMethod = listeners[data.method];\n      if (listenersForMethod) {\n        for (var i = 0; i < listenersForMethod.length; i++) {\n          listenersForMethod[i].call(null, data.params);\n        }\n      } else {\n        listenBuffer[data.method] = listenBuffer[data.method] || [];\n        listenBuffer[data.method].push(data.params);\n      }\n    }\n  };\n\n  windowForEventListening.addEventListener(\"message\", listener, false);\n\n  var postis = {\n    listen: function (method, callback) {\n      listeners[method] = listeners[method] || [];\n      listeners[method].push(callback);\n\n      var listenBufferForMethod = listenBuffer[method];\n      if (listenBufferForMethod) {\n        var listenersForMethod = listeners[method];\n        for (var i = 0; i < listenersForMethod.length; i++) {\n          for (var j = 0; j < listenBufferForMethod.length; j++) {\n            listenersForMethod[i].call(null, listenBufferForMethod[j]);\n          }\n        }\n      }\n      delete listenBuffer[method];\n    },\n\n    send: function (opts) {\n      var method = opts.method;\n\n      if ((ready || opts.method === readyMethod) && (targetWindow && typeof targetWindow.postMessage === \"function\")) {\n        targetWindow.postMessage(JSON.stringify({\n          postis: true,\n          scope: scope,\n          method: method,\n          params: opts.params\n        }), \"*\");\n      } else {\n        sendBuffer.push(opts);\n      }\n    },\n\n    ready: function (callback) {\n      if (ready) {\n        callback();\n      } else {\n        setTimeout(function () { postis.ready(callback); }, 50);\n      }\n    },\n\n    destroy: function (callback) {\n      clearInterval(readynessCheck);\n      ready = false;\n      if (windowForEventListening && typeof windowForEventListening.removeEventListener === \"function\") {\n        windowForEventListening.removeEventListener(\"message\", listener);\n      }\n      callback && callback();\n    }\n  };\n\n  var readyCheckID = +new Date() + Math.random() + \"\";\n\n  readynessCheck = setInterval(function () {\n    postis.send({\n      method: readyMethod,\n      params: readyCheckID\n    });\n  }, 50);\n\n  postis.listen(readyMethod, function (id) {\n    if (id === readyCheckID) {\n      clearInterval(readynessCheck);\n      ready = true;\n\n      for (var i = 0; i < sendBuffer.length; i++) {\n        postis.send(sendBuffer[i]);\n      }\n      sendBuffer = [];\n    } else {\n      postis.send({\n        method: readyMethod,\n        params: id\n      });\n    }\n  });\n\n  return postis;\n}\n\nmodule.exports = Postis;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/postis/src/index.js\n// module id = 5\n// module chunks = 0"],"sourceRoot":""}